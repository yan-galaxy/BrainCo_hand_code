/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: mtr_to_main.proto */

#ifndef PROTOBUF_C_mtr_5fto_5fmain_2eproto__INCLUDED
#define PROTOBUF_C_mtr_5fto_5fmain_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "stark_common.pb-c.h"
#include "main_mtr_shared.pb-c.h"

typedef struct _MtrFeedback MtrFeedback;
typedef struct _ButtonEvent ButtonEvent;
typedef struct _BatVoltResp BatVoltResp;
typedef struct _HandTypeResp HandTypeResp;
typedef struct _UMtrToMain UMtrToMain;


/* --- enums --- */

typedef enum _ButtonEvent__PressStatus {
  BUTTON_EVENT__PRESS_STATUS__UNUSED = 0,
  /*
   *pressing will be sent every 200ms, and must already pressed 200ms and above.
   */
  BUTTON_EVENT__PRESS_STATUS__PRESSING = 1,
  BUTTON_EVENT__PRESS_STATUS__NOT_PRESSING = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BUTTON_EVENT__PRESS_STATUS)
} ButtonEvent__PressStatus;

/* --- messages --- */

/*
 *Motor Data
 */
struct  _MtrFeedback
{
  ProtobufCMessage base;
  size_t n_current_finger_status;
  FingerStatus **current_finger_status;
  uint32_t seq_num;
  FingerStatusSampleRate sample_rate;
  /*
   *only send one group since the feedback message will be stop and re-start after expectation changed
   */
  FingerStatus *expected_finger_status;
  protobuf_c_boolean fingers_locked;
};
#define MTR_FEEDBACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mtr_feedback__descriptor) \
    , 0,NULL, 0, FINGER_STATUS_SAMPLE_RATE__RATE_UNUSED, NULL, 0 }


/*
 *Notify if Button is being pressed
 */
struct  _ButtonEvent
{
  ProtobufCMessage base;
  ButtonEvent__PressStatus press_status;
  uint32_t timestamp;
};
#define BUTTON_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&button_event__descriptor) \
    , BUTTON_EVENT__PRESS_STATUS__UNUSED, 0 }


struct  _BatVoltResp
{
  ProtobufCMessage base;
  float bat_volt;
};
#define BAT_VOLT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bat_volt_resp__descriptor) \
    , 0 }


struct  _HandTypeResp
{
  ProtobufCMessage base;
  HandType hand_type;
};
#define HAND_TYPE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hand_type_resp__descriptor) \
    , HAND_TYPE__HANDTYPE_UNUSED }


/*
 * Response Message: driver_board --> main_board
 */
struct  _UMtrToMain
{
  ProtobufCMessage base;
  /*
   *ImuData imu_data = 1;
   */
  MtrFeedback *motor_feedback;
  ButtonEvent *button_event;
  BatVoltResp *bat_volt_resp;
  HandTypeResp *hand_type_resp;
};
#define U__MTR_TO_MAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&u__mtr_to_main__descriptor) \
    , NULL, NULL, NULL, NULL }


/* MtrFeedback methods */
void   mtr_feedback__init
                     (MtrFeedback         *message);
size_t mtr_feedback__get_packed_size
                     (const MtrFeedback   *message);
size_t mtr_feedback__pack
                     (const MtrFeedback   *message,
                      uint8_t             *out);
size_t mtr_feedback__pack_to_buffer
                     (const MtrFeedback   *message,
                      ProtobufCBuffer     *buffer);
MtrFeedback *
       mtr_feedback__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mtr_feedback__free_unpacked
                     (MtrFeedback *message,
                      ProtobufCAllocator *allocator);
/* ButtonEvent methods */
void   button_event__init
                     (ButtonEvent         *message);
size_t button_event__get_packed_size
                     (const ButtonEvent   *message);
size_t button_event__pack
                     (const ButtonEvent   *message,
                      uint8_t             *out);
size_t button_event__pack_to_buffer
                     (const ButtonEvent   *message,
                      ProtobufCBuffer     *buffer);
ButtonEvent *
       button_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   button_event__free_unpacked
                     (ButtonEvent *message,
                      ProtobufCAllocator *allocator);
/* BatVoltResp methods */
void   bat_volt_resp__init
                     (BatVoltResp         *message);
size_t bat_volt_resp__get_packed_size
                     (const BatVoltResp   *message);
size_t bat_volt_resp__pack
                     (const BatVoltResp   *message,
                      uint8_t             *out);
size_t bat_volt_resp__pack_to_buffer
                     (const BatVoltResp   *message,
                      ProtobufCBuffer     *buffer);
BatVoltResp *
       bat_volt_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bat_volt_resp__free_unpacked
                     (BatVoltResp *message,
                      ProtobufCAllocator *allocator);
/* HandTypeResp methods */
void   hand_type_resp__init
                     (HandTypeResp         *message);
size_t hand_type_resp__get_packed_size
                     (const HandTypeResp   *message);
size_t hand_type_resp__pack
                     (const HandTypeResp   *message,
                      uint8_t             *out);
size_t hand_type_resp__pack_to_buffer
                     (const HandTypeResp   *message,
                      ProtobufCBuffer     *buffer);
HandTypeResp *
       hand_type_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hand_type_resp__free_unpacked
                     (HandTypeResp *message,
                      ProtobufCAllocator *allocator);
/* UMtrToMain methods */
void   u__mtr_to_main__init
                     (UMtrToMain         *message);
size_t u__mtr_to_main__get_packed_size
                     (const UMtrToMain   *message);
size_t u__mtr_to_main__pack
                     (const UMtrToMain   *message,
                      uint8_t             *out);
size_t u__mtr_to_main__pack_to_buffer
                     (const UMtrToMain   *message,
                      ProtobufCBuffer     *buffer);
UMtrToMain *
       u__mtr_to_main__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   u__mtr_to_main__free_unpacked
                     (UMtrToMain *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MtrFeedback_Closure)
                 (const MtrFeedback *message,
                  void *closure_data);
typedef void (*ButtonEvent_Closure)
                 (const ButtonEvent *message,
                  void *closure_data);
typedef void (*BatVoltResp_Closure)
                 (const BatVoltResp *message,
                  void *closure_data);
typedef void (*HandTypeResp_Closure)
                 (const HandTypeResp *message,
                  void *closure_data);
typedef void (*UMtrToMain_Closure)
                 (const UMtrToMain *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor mtr_feedback__descriptor;
extern const ProtobufCMessageDescriptor button_event__descriptor;
extern const ProtobufCEnumDescriptor    button_event__press_status__descriptor;
extern const ProtobufCMessageDescriptor bat_volt_resp__descriptor;
extern const ProtobufCMessageDescriptor hand_type_resp__descriptor;
extern const ProtobufCMessageDescriptor u__mtr_to_main__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_mtr_5fto_5fmain_2eproto__INCLUDED */
