syntax = "proto3";

enum LedMode
{
	LED_MODE_UNUSED = 0;
	LED_MODE_SHUTDOWN = 1;
	LED_MODE_KEEP = 2;
	LED_MODE_BLINK = 3;	//1Hz freq on-off cycle, 50% duty cycle
	LED_MODE_ONE_SHOT = 4;	//on-100ms, then off, no repeat, if repeatedly receive this, time counter will be reset at each time received (e.g., repeatedly receive interval <= 100ms equal always on)
	LED_MODE_BLINK0_5HZ = 5;	//0.5Hz freq on-off cycle, 50% duty cycle
	LED_MODE_BLINK2HZ = 6;	//2Hz freq on-off cycle, 50% duty cycle
}

enum LedColor
{
	LED_COLOR_UNCHANGED = 0;	//not equal to OFF, since majorly use LedMode to turn-off LED.
	LED_COLOR_R = 1;
	LED_COLOR_G = 2;
	LED_COLOR_RG = 3;
	LED_COLOR_B = 4;
	LED_COLOR_RB = 5;
	LED_COLOR_GB = 6;
	LED_COLOR_RGB = 7;
}

enum HandType
{
	HANDTYPE_UNUSED = 0;
	REGULAR_RIGHT = 1;
	REGULAR_LEFT = 2;
	MINI_RIGHT = 3;
	MINI_LEFT = 4;
}





//A generic message as a placeholder to represent most requests without detailed attributes. Since the union message only contains "message" type, not support other data types, so use GenericReq to wrap the request.
message GenericReq
{
	// enum Magic
	// {
	// 	UNUSED = 0;
	// 	PERFORM_REQ = 110;//magic number
	// } // enum 大概率不会修改，协议有必要采取改，如果有更多的value可以换为常规request，建议保持bool
	// Magic req = 1;	//Must be true if desire to request remote device information.
	bool req = 1;
}

enum FingerId
{
	//_AUX is auxiliary movement, all other is open-close
	FINGERID_UNUSED = 0;
	FINGERID_THUMB = 1;
	FINGERID_THUMB_AUX = 2;
	FINGERID_INDEX = 3;
	FINGERID_MIDDLE = 4;
	FINGERID_RING = 5;
	FINGERID_PINKY = 6;
}